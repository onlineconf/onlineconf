//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package resolver

import (
	pkg2_sql "database/sql"
	"errors"
	pkg1_common "github.com/onlineconf/onlineconf/admin/go/common"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF82018 = 1
	codecSelferCcRAW2018  = 255
	// ----- value types used ----
	codecSelferValueTypeArray2018     = 10
	codecSelferValueTypeMap2018       = 9
	codecSelferValueTypeString2018    = 6
	codecSelferValueTypeInt2018       = 2
	codecSelferValueTypeUint2018      = 3
	codecSelferValueTypeFloat2018     = 4
	codecSelferValueTypeNil2018       = 1
	codecSelferBitsize2018            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil2018 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct2018 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer2018 struct{}

func codecSelfer2018False() bool { return false }

func init() {
	if codec1978.GenVersion != 16 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic("codecgen version mismatch: current: 16, need " + ver + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg2_sql.NullString
		var _ pkg1_common.NullString
	}
}

func (x *serializerData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			if x.Modules == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Modules, e)
			} // end block: if x.Modules slice == nil
			z.EncWriteArrayElem()
			if x.Nodes == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceIntfV(x.Nodes, e)
			} // end block: if x.Nodes slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"modules\"")
			} else {
				r.EncodeString(`modules`)
			}
			z.EncWriteMapElemValue()
			if x.Modules == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Modules, e)
			} // end block: if x.Modules slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"nodes\"")
			} else {
				r.EncodeString(`nodes`)
			}
			z.EncWriteMapElemValue()
			if x.Nodes == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceIntfV(x.Nodes, e)
			} // end block: if x.Nodes slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *serializerData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2018 {
		*(x) = serializerData{}
	} else if yyct2 == codecSelferValueTypeMap2018 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2018 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2018)
	}
}

func (x *serializerData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "modules":
			z.F.DecSliceStringX(&x.Modules, d)
		case "nodes":
			z.F.DecSliceIntfX(&x.Nodes, d)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *serializerData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Modules, d)
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceIntfX(&x.Nodes, d)
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = z.DecCheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
}

func (x *serializerParam) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(6)
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.ID))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.ContentType))
			z.EncWriteArrayElem()
			yy11 := &x.Value
			yy11.CodecEncodeSelf(e)
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.Version))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Path))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Name))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(6)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ID\"")
			} else {
				r.EncodeString(`ID`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.ID))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ContentType\"")
			} else {
				r.EncodeString(`ContentType`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.ContentType))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Value\"")
			} else {
				r.EncodeString(`Value`)
			}
			z.EncWriteMapElemValue()
			yy18 := &x.Value
			yy18.CodecEncodeSelf(e)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Version\"")
			} else {
				r.EncodeString(`Version`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.Version))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Path\"")
			} else {
				r.EncodeString(`Path`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Path))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Name\"")
			} else {
				r.EncodeString(`Name`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Name))
			z.EncWriteMapEnd()
		}
	}
}

func (x *serializerParam) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2018 {
		*(x) = serializerParam{}
	} else if yyct2 == codecSelferValueTypeMap2018 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2018 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2018)
	}
}

func (x *serializerParam) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "ID":
			x.ID = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2018))
		case "ContentType":
			x.ContentType = (string)(string(r.DecodeStringAsBytes()))
		case "Value":
			x.Value.CodecDecodeSelf(d)
		case "Version":
			x.Version = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2018))
		case "Path":
			x.Path = (string)(string(r.DecodeStringAsBytes()))
		case "Name":
			x.Name = (string)(string(r.DecodeStringAsBytes()))
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *serializerParam) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ID = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2018))
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ContentType = (string)(string(r.DecodeStringAsBytes()))
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Value.CodecDecodeSelf(d)
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Version = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2018))
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Path = (string)(string(r.DecodeStringAsBytes()))
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Name = (string)(string(r.DecodeStringAsBytes()))
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = z.DecCheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
}

func (x *serializer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(0)
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(0)
			z.EncWriteMapEnd()
		}
	}
}

func (x *serializer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2018 {
		*(x) = serializer{}
	} else if yyct2 == codecSelferValueTypeMap2018 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2018 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2018)
	}
}

func (x *serializer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *serializer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = z.DecCheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj4-1, "")
	}
}
